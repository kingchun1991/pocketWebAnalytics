name: 📊 PocketWebAnalytics Data Aggregation

on:
  schedule:
    # Run every hour at minute 5 (UTC)
    - cron: '5 * * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_run:
        description: 'Force run aggregation'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  hourly-aggregation:
    name: 🔄 Hourly Data Aggregation
    runs-on: ubuntu-latest

    steps:
      - name: � Call Aggregation API
        env:
          AGGREGATION_API_KEY: ${{ secrets.AGGREGATION_API_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}
        run: |
          echo "🚀 Starting hourly aggregation at $(date -u)"
          echo "📡 Calling aggregation API endpoint..."

          # Call the aggregation API endpoint
          response=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.SITE_URL }}/api/aggregation" \
            -H "Authorization: Bearer ${{ secrets.AGGREGATION_API_KEY }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Cron/1.0")

          # Extract response body and status code
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')

          echo "📊 API Response (HTTP $http_code):"
          echo "$response_body" | jq . 2>/dev/null || echo "$response_body"

          # Check if successful
          if [ "$http_code" -eq 200 ]; then
            echo "✅ Aggregation completed successfully at $(date -u)"
            
            # Extract metrics from response
            hits_processed=$(echo "$response_body" | jq -r '.hits_processed // "N/A"' 2>/dev/null || echo "N/A")
            count=$(echo "$response_body" | jq -r '.count // "N/A"' 2>/dev/null || echo "N/A")
            
            echo "📈 Processed $hits_processed hits into $count aggregation records"
          else
            echo "❌ Aggregation failed with HTTP $http_code"
            echo "Response: $response_body"
            exit 1
          fi

      - name: � Verify Setup (on failure)
        if: failure()
        run: |
          echo "⚠️ Aggregation failed, checking configuration..."
          echo "🔧 SITE_URL: ${{ secrets.SITE_URL }}"
          echo "🔑 API Key set: ${{ secrets.AGGREGATION_API_KEY != '' }}"
          echo ""
          echo "💡 Troubleshooting tips:"
          echo "1. Verify SITE_URL is correct (e.g., https://your-app.vercel.app)"
          echo "2. Ensure AGGREGATION_API_KEY is set in repository secrets"
          echo "3. Check that /api/aggregation endpoint is deployed"
          echo "4. Verify PocketBase credentials are correct in environment"

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [hourly-aggregation]
    if: always()

    steps:
      - name: � Dashboard Performance Check
        env:
          SITE_URL: ${{ secrets.SITE_URL }}
        run: |
          echo "� Checking dashboard performance..."

          # Test dashboard endpoint response time
          start_time=$(date +%s%N)
          response=$(curl -s -w "\n%{http_code}" -X GET "${{ secrets.SITE_URL }}/api/stats" \
            -H "Content-Type: application/json")
          end_time=$(date +%s%N)

          # Calculate response time in milliseconds
          response_time=$(( (end_time - start_time) / 1000000 ))
          http_code=$(echo "$response" | tail -n1)

          echo "⏱️ Dashboard API response time: ${response_time}ms (HTTP $http_code)"

          if [ "$http_code" -eq 200 ]; then
            if [ "$response_time" -lt 1000 ]; then
              echo "✅ Dashboard performance: Excellent (< 1 second)"
            elif [ "$response_time" -lt 3000 ]; then
              echo "⚠️ Dashboard performance: Good (< 3 seconds)"
            else
              echo "🐌 Dashboard performance: Needs improvement (> 3 seconds)"
              echo "💡 Consider checking aggregation status and database performance"
            fi
          else
            echo "❌ Dashboard API not responding correctly"
            echo "💡 Check application deployment and PocketBase connectivity"
          fi

      - name: 📈 Summary Report
        if: always()
        run: |
          echo "📋 Aggregation Summary Report"
          echo "============================"
          echo "⏰ Run time: $(date -u)"
          echo "🔄 Aggregation job: ${{ needs.hourly-aggregation.result }}"
          echo "🎯 Next scheduled run: $(date -u -d '+1 hour' '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "📚 Documentation:"
          echo "- GitHub Actions Setup: GITHUB_ACTIONS_SETUP.md"
          echo "- Production Setup: PRODUCTION_SETUP.md"
          echo "- Manual aggregation: /api/aggregation endpoint"
